/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v{version}/feedbacks/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetFeedbackResponse'][];
            'application/json': components['schemas']['GetFeedbackResponse'][];
            'text/json': components['schemas']['GetFeedbackResponse'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateFeedbackRequest'];
          'text/json': components['schemas']['CreateFeedbackRequest'];
          'application/*+json': components['schemas']['CreateFeedbackRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/feedbacks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/feedbacks/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/internal/token/deduct': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DeductTokensRequest'];
          'text/json': components['schemas']['DeductTokensRequest'];
          'application/*+json': components['schemas']['DeductTokensRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DeductTokensResponse'];
            'application/json': components['schemas']['DeductTokensResponse'];
            'text/json': components['schemas']['DeductTokensResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/internal/feature/{featureName}/enabled': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          userId?: string;
        };
        header?: never;
        path: {
          featureName: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['IsFeatureEnabledResponse'];
            'application/json': components['schemas']['IsFeatureEnabledResponse'];
            'text/json': components['schemas']['IsFeatureEnabledResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/internal/payments/refund/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['RefundRequestDto'];
          'text/json': components['schemas']['RefundRequestDto'];
          'application/*+json': components['schemas']['RefundRequestDto'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RefundResultDto'];
            'application/json': components['schemas']['RefundResultDto'];
            'text/json': components['schemas']['RefundResultDto'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/create-subscription-checkout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateSubscriptionCheckoutRequest'];
          'text/json': components['schemas']['CreateSubscriptionCheckoutRequest'];
          'application/*+json': components['schemas']['CreateSubscriptionCheckoutRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreateSubscriptionCheckoutResponse'];
            'application/json': components['schemas']['CreateSubscriptionCheckoutResponse'];
            'text/json': components['schemas']['CreateSubscriptionCheckoutResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/cancel-subscription': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CancelSubscriptionRequest'];
          'text/json': components['schemas']['CancelSubscriptionRequest'];
          'application/*+json': components['schemas']['CancelSubscriptionRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/downgrade-subscription': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['DowngradeTierRequest'];
          'text/json': components['schemas']['DowngradeTierRequest'];
          'application/*+json': components['schemas']['DowngradeTierRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/setup-intent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['CreateSetupIntentResponse'];
            'application/json': components['schemas']['CreateSetupIntentResponse'];
            'text/json': components['schemas']['CreateSetupIntentResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/webhook': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/refund': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['RefundRequestDto'];
          'text/json': components['schemas']['RefundRequestDto'];
          'application/*+json': components['schemas']['RefundRequestDto'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RefundResultDto'];
            'application/json': components['schemas']['RefundResultDto'];
            'text/json': components['schemas']['RefundResultDto'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/prices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PricesResponse'];
            'application/json': components['schemas']['PricesResponse'];
            'text/json': components['schemas']['PricesResponse'];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/overage-usage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OverageUsageResponse'];
            'application/json': components['schemas']['OverageUsageResponse'];
            'text/json': components['schemas']['OverageUsageResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/payments/users/{username}/metered-events': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['UpdateMeteredBillingRequest'];
          'text/json': components['schemas']['UpdateMeteredBillingRequest'];
          'application/*+json': components['schemas']['UpdateMeteredBillingRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UpdatePayAsYouGoResponse'];
            'application/json': components['schemas']['UpdatePayAsYouGoResponse'];
            'text/json': components['schemas']['UpdatePayAsYouGoResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/v{version}/preferences/types': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetPreferenceTypesResponse'];
            'application/json': components['schemas']['GetPreferenceTypesResponse'];
            'text/json': components['schemas']['GetPreferenceTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/preferences/types/{serviceType}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          serviceType: components['schemas']['ServiceType'];
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetPreferenceTypesResponse'];
            'application/json': components['schemas']['GetPreferenceTypesResponse'];
            'text/json': components['schemas']['GetPreferenceTypesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/preferences/user/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetUserPreferencesResponse'];
            'application/json': components['schemas']['GetUserPreferencesResponse'];
            'text/json': components['schemas']['GetUserPreferencesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['UpdateUserPreferencesRequest'];
          'text/json': components['schemas']['UpdateUserPreferencesRequest'];
          'application/*+json': components['schemas']['UpdateUserPreferencesRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/reference/languages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetLanguagesResponse'];
            'application/json': components['schemas']['GetLanguagesResponse'];
            'text/json': components['schemas']['GetLanguagesResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-executions/{uniqueId}/users/{username}/configuration': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          uniqueId: string;
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['UpdateScheduledExecutionConfigurationRequestBody'];
          'text/json': components['schemas']['UpdateScheduledExecutionConfigurationRequestBody'];
          'application/*+json': components['schemas']['UpdateScheduledExecutionConfigurationRequestBody'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/events/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledEventQueryRequest'];
          'text/json': components['schemas']['CreateScheduledEventQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledEventQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/flights/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledFlightQueryRequest'];
          'text/json': components['schemas']['CreateScheduledFlightQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledFlightQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/hotels/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledHotelQueryRequest'];
          'text/json': components['schemas']['CreateScheduledHotelQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledHotelQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/local-places/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledLocalPlacesQueryRequest'];
          'text/json': components['schemas']['CreateScheduledLocalPlacesQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledLocalPlacesQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/weathers/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledWeatherQueryRequest'];
          'text/json': components['schemas']['CreateScheduledWeatherQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledWeatherQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/scheduled-queries/currency-exchanges/users/{username}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateScheduledCurrencyExchangeQueryRequest'];
          'text/json': components['schemas']['CreateScheduledCurrencyExchangeQueryRequest'];
          'application/*+json': components['schemas']['CreateScheduledCurrencyExchangeQueryRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/tokens/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateLoginRequest'];
          'text/json': components['schemas']['CreateLoginRequest'];
          'application/*+json': components['schemas']['CreateLoginRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/tokens/google-login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateGoogleLoginRequest'];
          'text/json': components['schemas']['CreateGoogleLoginRequest'];
          'application/*+json': components['schemas']['CreateGoogleLoginRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/tokens/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateRefreshTokenRequest'];
          'text/json': components['schemas']['CreateRefreshTokenRequest'];
          'application/*+json': components['schemas']['CreateRefreshTokenRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['CreateUserRequest'];
          'text/json': components['schemas']['CreateUserRequest'];
          'application/*+json': components['schemas']['CreateUserRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserManagementResponse'];
            'application/json': components['schemas']['UserManagementResponse'];
            'text/json': components['schemas']['UserManagementResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users/{username}/tier-usage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetUserTierUsageResponse'];
            'application/json': components['schemas']['GetUserTierUsageResponse'];
            'text/json': components['schemas']['GetUserTierUsageResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users/confirm-email': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          username?: string;
          token?: string;
        };
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users/forgot-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ForgotPasswordRequest'];
          'text/json': components['schemas']['ForgotPasswordRequest'];
          'application/*+json': components['schemas']['ForgotPasswordRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users/reset-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['ResetPasswordRequest'];
          'text/json': components['schemas']['ResetPasswordRequest'];
          'application/*+json': components['schemas']['ResetPasswordRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v{version}/users/{username}/toggle-status': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/v{version}/users/{username}/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GetUserProfileResponse'];
            'application/json': components['schemas']['GetUserProfileResponse'];
            'text/json': components['schemas']['GetUserProfileResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          username: string;
          version: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['UpdateUserProfileRequest'];
          'text/json': components['schemas']['UpdateUserProfileRequest'];
          'application/*+json': components['schemas']['UpdateUserProfileRequest'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UpdateUserProfileResponse'];
            'application/json': components['schemas']['UpdateUserProfileResponse'];
            'text/json': components['schemas']['UpdateUserProfileResponse'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    BillingPeriod: 'monthly' | 'yearly';
    CancelSubscriptionRequest: {
      cancellationReason?: string | null;
    };
    ChargingStationPreferences: {
      /** Format: double */
      Distance?: number | null;
      DistanceUnit?: string | null;
      /** Format: int32 */
      MaxResults?: number | null;
      OpenData?: boolean | null;
    };
    CreateFeedbackRequest: {
      title?: string | null;
      content?: string | null;
      /** Format: int32 */
      rating?: number;
      feedbackCategoryType: components['schemas']['FeedbackCategoryType'];
    };
    CreateGoogleLoginRequest: {
      id_token: string;
    };
    CreateLoginRequest: {
      username: string;
      password: string;
    };
    CreateRefreshTokenRequest: {
      username: string;
      refreshToken?: string | null;
    };
    CreateScheduledCurrencyExchangeQueryRequest: {
      baseCurrency: string;
      targetCurrencies?: string[] | null;
      additionalParameters?: string | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateScheduledEventQueryRequest: {
      searchQuery: string;
      additionalParameters?: {
        [key: string]: unknown;
      } | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateScheduledFlightQueryRequest: {
      departureAirportCode: string;
      destinationAirportCode: string;
      /** Format: date */
      departureDate: string;
      /** Format: date */
      returnDate?: string | null;
      additionalParameters?: {
        [key: string]: unknown;
      } | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateScheduledHotelQueryRequest: {
      location: string;
      /** Format: date */
      checkInDate: string;
      /** Format: date */
      checkOutDate: string;
      additionalParameters?: {
        [key: string]: unknown;
      } | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateScheduledLocalPlacesQueryRequest: {
      searchQuery: string;
      additionalParameters?: {
        [key: string]: unknown;
      } | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateScheduledWeatherQueryRequest: {
      cityName?: string | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: double */
      longitude?: number | null;
      units?: components['schemas']['WeatherUnitsType'];
      includeForecast?: boolean | null;
      /** Format: int32 */
      forecastDays?: number | null;
      additionalParameters?: {
        [key: string]: unknown;
      } | null;
      selectedColumns?: components['schemas']['QueryColumn'][] | null;
      /** Format: date-time */
      nextExecutionTime: string;
      schedule: string;
    };
    CreateSetupIntentResponse: {
      clientSecret?: string | null;
    };
    CreateSubscriptionCheckoutRequest: {
      targetTierType: components['schemas']['UserTierType'];
      billingPeriod?: components['schemas']['BillingPeriod'];
    };
    CreateSubscriptionCheckoutResponse: {
      sessionId?: string | null;
      checkoutUrl?: string | null;
    };
    CreateUserRequest: {
      username: string;
      password: string;
      /** Format: email */
      email: string;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      hasDataStorageConsent: boolean;
    };
    CurrencyExchangePreferences: {
      BaseCurrency?: string | null;
    };
    DeductTokensRequest: {
      username: string;
      /** Format: double */
      tokensToDeduct: number;
      serviceType: components['schemas']['ServiceType'];
    };
    DeductTokensResponse: {
      /** Format: double */
      remainingTokens: number;
      /** Format: double */
      dailyLimit: number;
      /** Format: double */
      tokensDeducted: number;
      limitReached: boolean;
      canUseApi: boolean;
    };
    DowngradeTierRequest: {
      targetTierType: components['schemas']['UserTierType'];
      billingPeriod: components['schemas']['BillingPeriod'];
    };
    EventPreferences: {
      Currency?: string | null;
      Language?: string | null;
    };
    /** @enum {string} */
    FeedbackCategoryType:
      | 'general'
      | 'bugReport'
      | 'featureRequest'
      | 'performance'
      | 'userInterface'
      | 'documentation'
      | 'subscriptionCancellation';
    FlightPreferences: {
      /** Format: int32 */
      Adults?: number | null;
      /** Format: int32 */
      Children?: number | null;
      /** Format: int32 */
      InfantsInSeat?: number | null;
      /** Format: int32 */
      InfantsOnLap?: number | null;
      /** Format: int32 */
      MaxPrice?: number | null;
      Currency?: string | null;
      TravelClass?: components['schemas']['TravelClass'];
      SortBy?: components['schemas']['FlightSortByType'];
    };
    /** @enum {string} */
    FlightSortByType: 'topFlights' | 'price' | 'departureTime' | 'arrivalTime' | 'duration' | 'emissions';
    ForgotPasswordRequest: {
      /** Format: email */
      email: string;
    };
    GetFeedbackResponse: {
      /** Format: int64 */
      id?: number;
      title?: string | null;
      content?: string | null;
      /** Format: int32 */
      rating?: number;
      category?: string | null;
      /** Format: date-time */
      createdOn?: string;
      /** Format: date-time */
      updatedOn?: string | null;
    };
    GetLanguagesResponse: {
      languages: components['schemas']['LanguageResponse'][];
    };
    GetPreferenceTypesResponse: {
      preferenceTypes?: components['schemas']['PreferenceTypeDto'][] | null;
    };
    GetUserPreferencesResponse: {
      preferences: components['schemas']['UserPreference'][];
    };
    GetUserProfileResponse: {
      username: string;
      email: string;
      isEmailConfirmed: boolean;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      googleId?: string | null;
      timezone: string;
      profilePictureUrl?: string | null;
      languageCode?: string | null;
      languageName?: string | null;
      countryCode?: string | null;
      countryName?: string | null;
      allowsMarketingEmails: boolean;
      isActive: boolean;
      tierName: string;
      /** Format: date-time */
      createdOn: string;
      /** Format: date-time */
      updatedOn?: string | null;
    };
    GetUserTierUsageResponse: {
      tierName: string;
      /** Format: int32 */
      currentUsage: number;
      /** Format: int32 */
      dailyLimit: number;
      /** Format: int32 */
      remainingRequests: number;
      /** Format: double */
      usagePercentage: number;
    };
    HolidayPreferences: {
      Language?: string | null;
      Type?: string | null;
    };
    HotelPreferences: {
      /** Format: int32 */
      Adults?: number | null;
      /** Format: int32 */
      Children?: number | null;
      /** Format: int32 */
      MinPrice?: number | null;
      /** Format: int32 */
      MaxPrice?: number | null;
      Currency?: string | null;
      SortBy?: components['schemas']['HotelSortByType'];
      FreeCancellation?: boolean | null;
      Rating?: components['schemas']['HotelRatingFilterType'];
    };
    /** @enum {string} */
    HotelRatingFilterType: 'rating35Plus' | 'rating40Plus' | 'rating45Plus';
    /** @enum {string} */
    HotelSortByType: 'lowestPrice' | 'highestRating' | 'mostReviewed';
    IsFeatureEnabledResponse: {
      featureName: string;
      userId?: string | null;
      isEnabled: boolean;
    };
    LanguageResponse: {
      languageCode: string;
      languageName: string;
    };
    LocalPlacesPreferences: {
      Currency?: string | null;
      Language?: string | null;
    };
    MapsPreferences: {
      Currency?: string | null;
      Language?: string | null;
    };
    OverageUsageResponse: {
      username?: string | null;
      tierName?: string | null;
      /** Format: double */
      regularTokensUsed?: number;
      /** Format: double */
      overageTokensUsed?: number;
      /** Format: double */
      totalOverageCharges?: number;
      currency?: string | null;
      /** Format: int32 */
      year?: number;
      /** Format: int32 */
      month?: number;
      isEligibleForOverage?: boolean;
    };
    PlaceReviewPreferences: {
      Currency?: string | null;
      Language?: string | null;
      SortBy?: string | null;
    };
    PointsOfInterestPreferences: {
      /** Format: double */
      Radius?: number | null;
      /** Format: int32 */
      MinRating?: number | null;
      /** Format: int32 */
      Limit?: number | null;
      Language?: string | null;
    };
    PreferenceTypeDto: {
      serviceTypeName?: string | null;
      name?: string | null;
      displayName?: string | null;
      description?: string | null;
      dataType?: string | null;
      validationSchema?: string | null;
      isRequired?: boolean;
      defaultValue?: string | null;
      isActive?: boolean;
    };
    PriceResponse: {
      /** Format: int64 */
      amount?: number;
      currency?: string | null;
      tierName?: string | null;
      /** Format: double */
      tokensPerMonthLimit?: number;
      billingPeriodName?: string | null;
    };
    PricesResponse: {
      prices?: components['schemas']['PriceResponse'][] | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & {
      [key: string]: unknown;
    };
    PublicTransportPreferences: {
      /** Format: int32 */
      Radius?: number | null;
      /** Format: int32 */
      Limit?: number | null;
    };
    QueryColumn: {
      name: string;
      isActive: boolean;
    };
    /** @enum {string} */
    RefundReasonType:
      | 'requestedByCustomer'
      | 'duplicate'
      | 'fraudulent'
      | 'subscriptionCanceled'
      | 'serviceNotDelivered';
    RefundRequestDto: {
      reason: components['schemas']['RefundReasonType'];
      metadata?: {
        [key: string]: string;
      } | null;
    };
    RefundResultDto: {
      refundId?: string | null;
      paymentIntentId?: string | null;
      /** Format: int32 */
      amount?: number;
      currency?: string | null;
      status?: string | null;
      reason?: string | null;
      /** Format: date-time */
      created?: string;
      metadata?: {
        [key: string]: string;
      } | null;
    };
    ResetPasswordRequest: {
      username: string;
      token: string;
      newPassword: string;
    };
    /** @enum {string} */
    ServiceType:
      | 'chargingStation'
      | 'currencyExchange'
      | 'event'
      | 'flight'
      | 'holiday'
      | 'hotel'
      | 'localPlaces'
      | 'maps'
      | 'placeReview'
      | 'weather'
      | 'pointsOfInterest'
      | 'publicTransport';
    /** @enum {string} */
    TravelClass: 'economy' | 'premiumEconomy' | 'business' | 'first';
    UpdateMeteredBillingRequest: {
      enabled: boolean;
    };
    UpdatePayAsYouGoResponse: {
      enabled?: boolean;
    };
    UpdateScheduledExecutionConfigurationRequestBody: {
      isActive: boolean;
    };
    UpdateUserPreferencesRequest: {
      preferences: components['schemas']['UserPreferences'];
    };
    UpdateUserProfileRequest: {
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      timezone?: string | null;
      /** Format: uri */
      profilePictureUrl?: string | null;
      languageCode?: string | null;
      countryCode?: string | null;
      allowsMarketingEmails?: boolean | null;
    };
    UpdateUserProfileResponse: {
      username: string;
      email: string;
      isEmailConfirmed: boolean;
      firstName?: string | null;
      lastName?: string | null;
      phoneNumber?: string | null;
      googleId?: string | null;
      timezone: string;
      profilePictureUrl?: string | null;
      languageCode?: string | null;
      languageName?: string | null;
      countryCode?: string | null;
      countryName?: string | null;
      allowsMarketingEmails: boolean;
      isActive: boolean;
      tierName: string;
    };
    UserManagementResponse: {
      message?: string | null;
    };
    UserPreference: {
      preferenceTypeDisplayName: string;
      value: string;
    };
    UserPreferences: {
      Flight?: components['schemas']['FlightPreferences'];
      Hotel?: components['schemas']['HotelPreferences'];
      Weather?: components['schemas']['WeatherPreferences'];
      Event?: components['schemas']['EventPreferences'];
      LocalPlaces?: components['schemas']['LocalPlacesPreferences'];
      PublicTransport?: components['schemas']['PublicTransportPreferences'];
      CurrencyExchange?: components['schemas']['CurrencyExchangePreferences'];
      ChargingStation?: components['schemas']['ChargingStationPreferences'];
      Holiday?: components['schemas']['HolidayPreferences'];
      Maps?: components['schemas']['MapsPreferences'];
      PlaceReview?: components['schemas']['PlaceReviewPreferences'];
      PointsOfInterest?: components['schemas']['PointsOfInterestPreferences'];
    };
    /** @enum {string} */
    UserTierType: 'basic' | 'essential' | 'advanced';
    WeatherPreferences: {
      Units?: components['schemas']['WeatherUnitsType'];
      IncludeForecast?: boolean | null;
      /** Format: int32 */
      ForecastDays?: number | null;
    };
    /** @enum {string} */
    WeatherUnitsType: 'metric' | 'imperial' | 'kelvin';
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
